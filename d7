from django.db import models
from django.contrib.auth import get_user_model
from django.contrib.auth.decorators import login_required
from django.shortcuts import render, redirect, get_object_or_404
from django.http import JsonResponse
from django.db.models import Count, Avg
from asgiref.sync import async_to_sync
from channels.layers import get_channel_layer
import subprocess
import tempfile
import json
import os
import resource

User = get_user_model()

# Models
class Problem(models.Model):
    title = models.CharField(max_length=255)
    description = models.TextField()
    input_test_cases = models.TextField()  # JSON format
    expected_outputs = models.TextField()  # JSON format
    difficulty = models.IntegerField(default=1500)  # Default rating

class Submission(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    problem = models.ForeignKey(Problem, on_delete=models.CASCADE)
    code = models.TextField()
    language = models.CharField(max_length=10, choices=[('python', 'Python'), ('cpp', 'C++'), ('java', 'Java')])
    result = models.CharField(max_length=50, null=True, blank=True)
    timestamp = models.DateTimeField(auto_now_add=True)
    success = models.BooleanField(default=False)

class UserRating(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    rating = models.IntegerField(default=1500)

# Views
@login_required
def submit_code(request, problem_id):
    if request.method == 'POST':
        problem = get_object_or_404(Problem, id=problem_id)
        code = request.POST.get('code')
        language = request.POST.get('language')

        # Run test case evaluation with sandbox
        result = evaluate_code_sandboxed(code, problem.input_test_cases, problem.expected_outputs, language)
        success = (result == 'All Passed')
        
        submission = Submission.objects.create(
            user=request.user,
            problem=problem,
            code=code,
            language=language,
            result=result,
            success=success
        )
        
        if success:
            update_user_rating(request.user, problem)
        
        # Update leaderboard in real-time
        update_leaderboard()
        
        return JsonResponse({'result': result})
    return JsonResponse({'error': 'Invalid request'}, status=400)

# Rating System (Elo-based)
def update_user_rating(user, problem):
    user_rating, _ = UserRating.objects.get_or_create(user=user)
    k_factor = 32
    expected_score = 1 / (1 + 10 ** ((problem.difficulty - user_rating.rating) / 400))
    actual_score = 1  # Full points for passing all test cases
    new_rating = user_rating.rating + k_factor * (actual_score - expected_score)
    user_rating.rating = int(new_rating)
    user_rating.save()

# Sandbox Execution Function
def set_limits():
    resource.setrlimit(resource.RLIMIT_CPU, (2, 2))  # Limit CPU time to 2 seconds
    resource.setrlimit(resource.RLIMIT_AS, (256 * 1024 * 1024, 256 * 1024 * 1024))  # Limit memory usage to 256MB

def evaluate_code_sandboxed(code, input_cases, expected_outputs, language):
    input_cases = json.loads(input_cases)
    expected_outputs = json.loads(expected_outputs)
    
    if language == 'python':
        ext = '.py'
        run_cmd = ['python3']
    elif language == 'cpp':
        ext = '.cpp'
        compile_cmd = ['g++', '-o', 'temp_exec']
        run_cmd = ['./temp_exec']
    elif language == 'java':
        ext = '.java'
        compile_cmd = ['javac']
        run_cmd = ['java', 'TempFile']
    else:
        return 'Unsupported Language'
    
    with tempfile.NamedTemporaryFile(mode='w+', suffix=ext, delete=False) as temp_file:
        temp_file.write(code)
        temp_file.flush()
        temp_filename = temp_file.name
        temp_basename = os.path.basename(temp_filename)
    
    if language in ['cpp', 'java']:
        compile_process = subprocess.run(compile_cmd + [temp_filename], capture_output=True, text=True)
        if compile_process.returncode != 0:
            return f'Compilation Error: {compile_process.stderr}'
    
    results = []
    for i, input_case in enumerate(input_cases):
        try:
            if language == 'cpp':
                execution_cmd = run_cmd
            elif language == 'java':
                execution_cmd = ['java', temp_basename.replace('.java', '')]
            else:
                execution_cmd = ['python3', temp_filename]
            
            process = subprocess.run(
                execution_cmd, input=input_case, text=True, capture_output=True, timeout=2, preexec_fn=set_limits
            )
            output = process.stdout.strip()
            expected = expected_outputs[i].strip()
            if output == expected:
                results.append('Pass')
            else:
                results.append('Fail')
        except subprocess.TimeoutExpired:
            results.append('Timeout')
        except Exception as e:
            results.append(f'Error: {str(e)}')
    
    os.remove(temp_filename)
    if language == 'cpp':
        os.remove('temp_exec')
    elif language == 'java':
        os.remove(temp_basename.replace('.java', '.class'))
    
    return 'All Passed' if all(res == 'Pass' for res in results) else 'Some Failed'

# Real-time Leaderboard
@login_required
def leaderboard(request):
    scores = UserRating.objects.values('user__email', 'rating').order_by('-rating')
    return JsonResponse({'leaderboard': list(scores)})

def update_leaderboard():
    scores = list(UserRating.objects.values('user__email', 'rating').order_by('-rating'))
    channel_layer = get_channel_layer()
    async_to_sync(channel_layer.group_send)(
        'leaderboard_group',
        {'type': 'update_leaderboard', 'leaderboard': scores}
    )

# Templates and Forms can be added as needed for UI rendering
